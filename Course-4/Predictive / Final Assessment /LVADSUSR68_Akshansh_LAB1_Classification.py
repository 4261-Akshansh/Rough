# -*- coding: utf-8 -*-
"""LVADSUSR68_Akshansh_LAB1_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LIs4v6yqKNgV9nNxCKY-k-WT5jfPFkQy
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from scipy import stats

# Load the dataset
data = pd.read_csv('/content/loan_approval.csv')

df = pd.DataFrame(data)

# Handle missing values
df.dropna(inplace=True)

# Detect and handle outliers
z_scores = stats.zscore(df[['income_annum', 'loan_amount', 'cibil_score']])
abs_z_scores = abs(z_scores)
outliers = (abs_z_scores > 3).any(axis=1)
df = df[~outliers]

# Exploratory Data Analysis (EDA)
# Summary statistics
print(df.describe())

# Correlation matrix
correlation_matrix = df.corr()
print(correlation_matrix)

# Visualize correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

# Pairplot
# sns.pairplot(df, hue='loan_status', palette='husl')
# plt.show()

# Boxplot for categorical variables
plt.figure(figsize=(12, 6))
sns.boxplot(x='loan_status', y='no_of_dependents', data=df)
plt.title("Boxplot of Loan Status vs. Number of Dependents")
plt.xlabel("Loan Status")
plt.ylabel("Number of Dependents")
plt.show()

# Boxplot for numeric variables
numeric_vars = ['income_annum', 'loan_amount', 'loan_term', 'cibil_score',
                'residential_assets_value', 'commercial_assets_value',
                'luxury_assets_value', 'bank_asset_value']

for var in numeric_vars:
    plt.figure(figsize=(12, 6))
    sns.boxplot(x='loan_status', y=var, data=df)
    plt.title(f"Boxplot of Loan Status vs. {var}")
    plt.xlabel("Loan Status")
    plt.ylabel(var)
    plt.show()

# Classification models
# Convert categorical variables to dummy variables
df = pd.get_dummies(df, columns=['education', 'self_employed'], drop_first=True)

# Split the data into train and test sets
X = df.drop(['loan_id', 'loan_status'], axis=1)
y = df['loan_status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Random Forest classifier
rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train, y_train)

# Train the Logistic Regression classifier
logistic_classifier = LogisticRegression(random_state=42)
logistic_classifier.fit(X_train, y_train)

# Train the Support Vector Machine classifier
svm_classifier = SVC(random_state=42)
svm_classifier.fit(X_train, y_train)

# Predict loan status using Random Forest
y_pred_rf = rf_classifier.predict(X_test)

# Predict loan status using Logistic Regression
y_pred_logistic = logistic_classifier.predict(X_test)

# Predict loan status using Support Vector Machine
y_pred_svm = svm_classifier.predict(X_test)

# Evaluate Random Forest model
print("\nRandom Forest:")
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_rf))
print("\nClassification Report:")
print(classification_report(y_test, y_pred_rf))
print("Accuracy:", accuracy_score(y_test, y_pred_rf))

# Evaluate Logistic Regression model
print("\nLogistic Regression:")
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_logistic))
print("\nClassification Report:")
print(classification_report(y_test, y_pred_logistic))
print("Accuracy:", accuracy_score(y_test, y_pred_logistic))

# Evaluate Support Vector Machine model
print("\nSupport Vector Machine:")
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_svm))
print("\nClassification Report:")
print(classification_report(y_test, y_pred_svm))
print("Accuracy:", accuracy_score(y_test, y_pred_svm))

sns.pairplot(df, hue='loan_status', palette='husl')
plt.show()

